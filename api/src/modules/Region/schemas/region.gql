scalar Date

type Region {
  _id: String!
  code: String!
  workspace: Workspace
  type: String
  subTypes: [String]
  name: String
  ancestors: [Region]
  parent: Region
  isActive: Boolean
  location: Location
  filemeta: FileMeta
  idx: Int
  # not in schema, generated by ResolveField
  children: [Region]
  isTail: Boolean
  isAddress: Boolean
}

type PaginateRegion {
  nodes: [Region]
  startCursor: ID
  endCursor: ID
  nodeCount: Float
  total: Float
  isEnd: Boolean
}

input RegionSearchModel {
  q: String
  code: String
  isAddress: Boolean
  codes: [String]
  name: String
  types: [String!]
  parent: ID
  parentCode: String
  isActive: Boolean
  subTypes: [String!]
  ancestors: [String!]
  ancestorCodes: [String!]
  populates: [String!]
}

input LocalizeStringModel {
  en: String
  hk: String
  cn: String
}

input RegionCreateModel {
  code: String!
  name: LocalizeStringModel
  subTypes: [String]
  ancestors: [String]
  parent: String
  isActive: Boolean
  types: String!
}

input RegionUpdateModel {
  name: LocalizeStringModel
  subTypes: [String]
  ancestors: [String]
  parent: String
  isActive: Boolean
  types: String
}

type Query {
  region(code: String!): Region
  nearestRegion(latitude: Float!, longitude: Float!): Region
  regions(query: RegionSearchModel, paginate: Paginate): PaginateRegion
}

type Mutation {
  createRegion(regionCreateModel: RegionCreateModel): Region
  updateRegion(id: String!, regionUpdateModel: RegionUpdateModel): Region
}
