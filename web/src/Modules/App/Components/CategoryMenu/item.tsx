import React from "react";
import { useIntl } from "react-intl";
import clsx from "clsx";
import concat from "lodash/concat";
import isEmpty from "lodash/isEmpty";
import { useRouter } from "next/router";
import Menu from "@material-ui/core/Menu";
import MenuItem from "@material-ui/core/MenuItem";
import { makeStyles, Typography } from "@material-ui/core";

import { ExpandMoreIcon } from "~/src/Components/SvgIcon";
import { useCategories } from "../../../Category/Hooks/useCategories";

const useClasses = makeStyles((theme) => ({
  root: {},
  menus: {
    flex: 1,
    whiteSpace: "nowrap",
    scrollBehavior: "smooth",
    position: "relative",
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
    overflowX: "scroll",
    overflowY: "hidden",
    margin: 0,
    padding: "0px 20px",
    "scrollbar-width": "none",
    "&::-webkit-scrollbar": {
      display: "none"
    },
    "& li": {
      display: "inline-block",
      position: "relative"
    }
  },
  sub_title: {
    color: theme.palette.text.primary,
    cursor: "pointer",
    "&:hover": {
      color: theme.palette.primary.main,
      textDecoration: "none"
    },
    "&$active": {
      color: theme.palette.primary.main
    }
  },
  title: {
    display: "inline-block",
    padding: "10px 0px",
    margin: "0px 18px",
    fontFamily: "Adobe Heiti Std",
    fontSize: "16px",
    fontWeight: 400,
    textDecoration: "none",
    cursor: "pointer",
    whiteSpace: "nowrap",
    "&:hover": {
      color: theme.palette.primary.main,
      textDecoration: "none"
    },
    "&$active": {
      color: theme.palette.primary.main
    }
  },
  title_flex: {
    display: "flex",
    margin: 0
  },
  active: {}
}));
interface IMenu {
  key: string;
  value?: string;
  menus?: IMenu[];
  active?: boolean;
}
interface ItemProps
  extends React.DetailedHTMLProps<
    React.HTMLAttributes<HTMLUListElement>,
    HTMLUListElement
  > {}
export const Item = React.forwardRef<HTMLUListElement, ItemProps>(function Item(
  { className, ...rest }: ItemProps,
  ref
) {
  const intl = useIntl();
  const router = useRouter(); // get router.query.category
  const { categories } = useCategories({
    variables: { query: { isActive: true, parent: null } }
  });
  let defaultMenus: IMenu[] = [
    {
      key: intl.formatMessage({ id: "display_all_products" }),
      active: !router.query.category
    }
  ];
  const prepareMenus = (categories: ICategory[]): IMenu[] => {
    return (
      categories?.map<IMenu>((category) => {
        let active = false;
        const key = router.query.category as string;
        if (category.code === key) {
          active = true;
        }
        return {
          key: category.name,
          value: category.code,
          menus: category.children
            ? prepareMenus(category.children)
            : undefined,
          active: active
        };
      }) || []
    );
  };
  // generated by api data
  const generatedMenus = prepareMenus(categories);
  const menus = concat(defaultMenus, generatedMenus);
  // concat default and generated menus for display
  return (
    <Menus
      menus={menus}
      onMenuClick={(menu) => {
        const links = prepareMenuLink(menu);
        router.push(links.origin, links.as);
      }}
      _ref={ref}
    />
  );
});
const prepareMenuLink = (menu: IMenu) => {
  const href = menu.value
    ? {
        origin: `/products?category=${encodeURIComponent(
          menu.value
        )}&title=${encodeURIComponent(menu.key)}`,
        as: `/products?category=${encodeURIComponent(menu.value)}`
      }
    : {
        origin: `/products?title=${encodeURIComponent(menu.key)}`,
        as: `/products`
      };
  return href;
};
const Menus = ({
  menus = [],
  onMenuClick,
  _ref
}: {
  menus?: IMenu[];
  onMenuClick?: (menu: IMenu) => void;
  _ref: any;
}) => {
  const classes = useClasses();
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };
  return (
    <ul ref={_ref} className={classes.menus}>
      {menus.map((menu, idx) => {
        const isEnd = isEmpty(menu.menus);

        return (
          <li key={idx}>
            <a
              className={clsx(classes.title, !isEnd ? classes.title_flex : "", {
                [classes.active]: menu.active
              })}
              onClick={(e: any) => {
                !isEnd ? handleClick(e) : onMenuClick?.(menu);
              }}
            >
              <Typography variant="subtitle1" color="inherit">
                {menu.key}
              </Typography>
              {!isEnd && <ExpandMoreIcon />}
            </a>
            {!isEnd && (
              <SubMenus
                menus={menu.menus}
                anchorEl={anchorEl}
                onMenuClick={onMenuClick}
                handleClose={handleClose}
              />
            )}
          </li>
        );
      })}
    </ul>
  );
};

const SubMenus = ({
  menus = [],
  anchorEl,
  onMenuClick,
  handleClose
}: {
  menus?: IMenu[];
  anchorEl?: any;
  onMenuClick?: (menu: IMenu) => void;
  handleClose?: () => void;
}) => {
  const classes = useClasses();
  return (
    <Menu
      id="simple-menu"
      anchorEl={anchorEl}
      keepMounted
      open={Boolean(anchorEl)}
      onClose={handleClose}
    >
      {menus.map((menu, index) => (
        <MenuItem key={index}>
          <a
            className={clsx(classes.sub_title, {
              [classes.active]: menu.active
            })}
            onClick={() => {
              onMenuClick?.(menu);
            }}
          >
            <Typography variant="subtitle1" color="inherit">
              {menu.key}
            </Typography>
          </a>
        </MenuItem>
      ))}
    </Menu>
  );
};
