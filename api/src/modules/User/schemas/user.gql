scalar Date

type UserAvatar {
  _id: ID
  fileMeta: FileMeta
  default: Boolean
}

type UserPreferenceTheme {
  theme: Theme
  scope: String
}

type UserPreference {
  language: String
  receiveNotification: Boolean
  meta: JSON
  themes: [UserPreferenceTheme]
  subscriptionNotification: Boolean
}

type UserActivationIssue {
  _id: String
  reason: String
  createdAt: Date
  status: Int
}

type UserActions {
  allows: [String]
  denies: [String]
}

type UserVerified {
  email: Boolean
  phone: Boolean
}

# keeping the current workspace separate as sometimes workspace
# might not be in the modules
type CurrentWorkspace {
  _id: String
  name: String
  type: String
  code: String
}

type User {
  _id: ID!
  phoneRegionCode: String
  phone: String
  email: String
  username: String
  verified: UserVerified
  isVerified: Boolean
  status: Int
  userTypes: [String]
  name: String
  firstName: String
  lastName: String
  gender: String
  dob: Date
  description: String
  avatars: [UserAvatar]
  preferences: UserPreference
  activationIssues: [UserActivationIssue]
  actions: UserActions

  # user currentWorkspace
  currentWorkspace: CurrentWorkspace

  # generated by mongoose {timestamp: true}
  createdAt: Date
  updatedAt: Date
}

input UserActivationIssueCreateModel {
  reason: String!
  createdAt: Date
  status: Int
}

input InputUserPreferenceTheme {
  theme: String
  scope: String
}

input UserPreferenceCreateModel {
  language: String
  receiveNotification: Boolean
  meta: JSON
  themes: [InputUserPreferenceTheme]
  subscriptionNotification: Boolean
}

input UserAvatarCreateModel {
  fileMeta: ID!
  default: Boolean
}

input UserVerifiedCreateModel {
  phone: Boolean
  email: Boolean
}

input UserCreateModel {
  phoneRegionCode: String
  phone: String
  email: String
  username: String
  verified: UserVerifiedCreateModel
  isVerified: Boolean
  userTypes: [String]
  name: String
  firstName: String
  lastName: String
  dob: String
  gender: String
  avatars: [UserAvatarCreateModel]
  preferences: UserPreferenceCreateModel
  status: Int
  description: String
  activationIssues: [UserActivationIssueCreateModel]
  currentWorkspace: String
}

input UserUpdateModel {
  name: String
  firstName: String
  lastName: String
  dob: String
  gender: String
  email: String
  description: String
  phoneRegionCode: String
  phone: String
  preferences: UserPreferenceCreateModel
}

type PaginateUser {
  nodes: [User]
  startCursor: ID
  endCursor: ID
  nodeCount: Float
  total: Float
  isEnd: Boolean
}

input UserSearchModel {
  q: String
}

type UploadRequirement {
  fileType: String
  name: String
}

type MetaRequirement {
  data: String
  required: Boolean
}

type Query {
  user(id: ID!): User
  users(
    query: UserSearchModel
    paginate: Paginate
    options: QueryOption
  ): PaginateUser
  currentUser: User
  userByInput(input: String!): User
}

type Mutation {
  currentUser: User
  isDuplicatePhone(phone: String!, userType: String): Boolean
  isDuplicateEmail(email: String!, userType: String): Boolean
  createUser(userCreateModel: UserCreateModel): User
  updateUser(id: ID!, userUpdateModel: UserUpdateModel): User
  toggleReceiveNotification(userId: ID!, isEnabled: Boolean): User
}
