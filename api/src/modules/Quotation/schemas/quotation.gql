scalar Date

type Contact {
  name: String
  phone: String
}

type Consignee {
  name: String
  phone: String
}

type Detail {
  product: Product
  productSKU: ProductSku
  qty: Int
  amount: Float
  remark: String
}

type Quotation {
  _id: ID!
  quotationNo: String
  client: User
  workspace: Workspace
  quotationDate: Date
  orderType: String
  billingContact: Address
  contactAddress: Address
  contact: Contact
  consignee: Consignee
  details: [Detail]
  charge: OrderCharge
  services: [OrderService]
  remarks: String
  status: Int
  # generated by mongoose {timestamp: true}
  createdAt: Date
  updatedAt: Date
}

input InputQuotationDetailModel {
  product: String!
  productSKU: String!
  qty: Int!
  amount: Float!
  remark: String
}
input InputOrderChargeCouponModel {
  code: String
  amount: Float
}
input InputOrderChargeModel {
  totalAmount: Float
  hasQuote: Boolean
  currency: String
  base: Float
  tips: Float
  basePriceType: String
  coupons: [InputOrderChargeCouponModel]
  services: [InputOrderChargeServiceModel]
  others: [InputOrderChargeOtherModel]
}

input InputOrderChargeServiceModel {
  service: String
  isQuotation: Boolean
  amount: Float
}

input InputOrderChargeOtherModel {
  description: String
  amount: Float
}

input InputOrderServiceModel {
  service: String!
  value: JSON
  remarks: String
  quotedPrice: Float
}

input InputContact {
  name: String
  phone: String
}
input InputConsign {
  name: String
  phone: String
}

input QuotationFormCreateModel {
  orderType: String!
  contact: InputContact
  consignee: InputConsign
  contactAddressId: String
  contactAddress: AddressCreateModel
  billingContactId: String
  billingContact: AddressCreateModel
  details: [InputQuotationDetailModel]
  charge: InputOrderChargeModel
  services: [InputOrderServiceModel]
  remarks: String
}

input QuotationFormUpdateModel {
  orderType: String
  contact: InputContact
  consignee: InputConsign
  contactAddressId: String
  contactAddress: AddressCreateModel
  billingContactId: String
  billingContact: AddressCreateModel
  details: [InputQuotationDetailModel]
  charge: InputOrderChargeModel
  services: [InputOrderServiceModel]
  status: Int
  remarks: String
}

type PaginateQuotation {
  nodes: [Quotation]
  startCursor: ID
  endCursor: ID
  nodeCount: Float
  total: Float
  isEnd: Boolean
}

input QuotationSearchModel {
  q: String
}

type Query {
  quotation(id: ID!): Quotation
  quotations(
    query: QuotationSearchModel
    paginate: Paginate
    options: QueryOption
  ): PaginateQuotation
}

type Mutation {
  createQuotation(quotationFormCreateModel: QuotationFormCreateModel): Quotation
  updateQuotation(
    id: ID!
    quotationFormUpdateModel: QuotationFormUpdateModel
  ): Quotation
}
