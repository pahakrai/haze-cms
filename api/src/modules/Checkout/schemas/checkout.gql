scalar Date

type Checkout {
  _id: ID!
  status: Int
  expireAt: Date
  # productInventoryLogs: [ProductInventoryLog!]
  order: Order
  payment: Payment

  # generated by mongoose {timestamp: true}
  createdAt: Date
  updatedAt: Date
}

input CheckoutPaymentModel {
  paymentMethod: String!
  sourceId: String
}

input CheckoutOrderModel {
  order: OrderCreateModel
  orderId: String
  payment: CheckoutPaymentModel
}

type PaginateCheckout {
  nodes: [Checkout]
  startCursor: ID
  endCursor: ID
  nodeCount: Float
  total: Float
  isEnd: Boolean
}

type Query {
  getCheckout(id: ID!): Checkout
}

type Mutation {
  checkout(
    checkoutOrderModel: CheckoutOrderModel!
    finalize: Boolean!
  ): Checkout
  finalize(id: ID!, payment: CheckoutPaymentModel): Checkout
  # createCheckout(checkoutCreateModel: CheckoutCreateModel): Checkout
  # updateCheckout(id: ID!, checkoutUpdateModel: CheckoutUpdateModel): Checkout
}
