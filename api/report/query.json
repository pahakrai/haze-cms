[
  {
    "name": "RecruitmentReport",
    "func": "const Model = connection.models.Recruitments; let condition; if (query.startDateFrom && query.startDateTo) { condition = {workspace: query.workspace,postStartDate: {$gte: query.startDateFrom, $lte: query.startDateTo} }; } if (query.startDateTo && !query.startDateFrom) { condition = {workspace: query.workspace,postStartDate: {$lte: query.startDateTo} }; } if (query.startDateFrom && !query.startDateTo) { condition = {workspace: query.workspace,postStartDate: {$gte: query.startDateFrom} }; } if (!query.startDateTo && !query.startDateFrom) { condition = {workspace: query.workspace}; } const result = await Model.find(condition) .populate({path: 'publisher'}) .populate({path: 'category'}) .populate({path: 'educationLevel'}) .populate({path: 'candidates'}) .lean() .exec(); let results = []; result.map(recruitment => { let statusValues; switch (recruitment.status) {case -1:  statusValues = '關閉';  break;case 0:  statusValues = '草稿';  break;case 1:  statusValues = '招聘中';  break;case 100:  statusValues = '已過期';  break;default:  break; } const mapType = {fullTime: '全職',partTime: '兼職',freelance: '自由職業' }; const employmentType = mapType[recruitment.employmentType]; results.push({title: recruitment.title,vacancy:recruitment.vacancy,employmentType: employmentType,currency: recruitment && recruitment.wage && recruitment.wage.currency,minWage: recruitment && recruitment.wage && recruitment.wage.min,maxWage: recruitment && recruitment.wage && recruitment.wage.max,educationLevel:  recruitment &&  recruitment.educationLevel &&  recruitment.educationLevel.name['en'],industry:  recruitment.category &&  recruitment.category &&  recruitment.category.name['en'],candidate: recruitment.candidates && recruitment.candidates.length,exp: recruitment.exp,postStartDate: recruitment.postStartDate,postEndDate: recruitment.postEndDate,status: statusValues,publisher:  recruitment && recruitment.publisher && recruitment.publisher.name }); }); return [{meta: {worksheet: 'RecruitmentReport'}, data: {details: results}}];"
  },
  {
    "name": "EmployerReport",
    "func": "const Model=connection.models.Users;const result=await Model.find({currentWorkspace:new ObjectId(query.workspace),userTypes:{$in:['user']}});const results=[];result.map(e=>{let statusValues;switch (e.status) { case -1:statusValues = '封鎖';break;case 0:statusValues = '未啟用';break; case 1: statusValues = '可用';break;default:break;} results.push({CompanyName:`${e.name} Company`,ContactName:`${e.firstName}${e.lastName}`,Email:e.email,PhoneNo:e.phone,status:statusValues,registrationDate:e.createdAt})});return[{meta:{worksheet:'EmployerReport'},data:{details:results}}];"
  },
  {
    "name": "TalentReport",
    "func": " const Model=connection.models.Users;let condition;condition = {currentWorkspace: new ObjectId(query.workspace),userTypes: {$in: ['member']}};const result = await Model.aggregate().lookup({  from: 'Resumes',  localField: '_id',  foreignField: 'user',  as: '_resumes'}).lookup({  from: 'EducationLevels',  localField: '_resumes.educations.educationLevel',  foreignField: '_id',  as: '_educationLevels'}).lookup({  from: 'Employments',  localField: '_id',  foreignField: 'employee',  as: '_employments'}).match(condition).exec();let results = [];result.map(employee => {let statusValues;switch (employee.status) { case -1:statusValues = '封鎖';break;case 0:statusValues = '未啟用';break; case 1: statusValues = '可用';break;default:break;} const year = new Date().getFullYear();const brith =  employee.dob && employee.dob.toString() ? new Date(employee.dob.toString()).getFullYear() : 0;const age = brith != 0 ? year - brith : 0;results.push({  name: `${employee.firstName} ${employee.lastName}`,  email: employee.email,  age: age,  phoneNo: employee.phone,    educationLevel:employee && employee._educationLevels && employee._educationLevels[0]? employee._educationLevels[0].name['en']: 'N/A',  gender: employee.gender,  count: employee && employee._employments && employee._employments.length ? employee._employments.length : 0,status:statusValues,registerDate:employee.createdAt});});return [{meta: {worksheet: 'TalentReport'}, data: {details: results}}];"
  },
  {
    "name": "RatingReport",
    "func": "const Model=connection.models.Employments;const condition={status:100,'_employer.currentWorkspace':new ObjectId(query.workspace), '_candidateUser.currentWorkspace':new ObjectId(query.workspace),'_feedback.workspace':new ObjectId(query.workspace)};const result=await Model.aggregate().lookup({from:'Users',localField:'employer',foreignField:'_id',as:'_employer'}).lookup({from:'Candidates',localField:'candidate',foreignField:'_id',as:'_candidate'}).lookup({from:'Users',localField:'_candidate.candidate',foreignField:'_id',as:'_candidateUser'}).lookup({from:'Feedbacks',localField:'_candidate.recruitment',foreignField:'ref',as:'_feedback'}).match({...condition,'_feedback.refType':'Recruitments'}).unwind('_employer').unwind('_candidate').unwind('_candidateUser').unwind('_feedback');const results=[];result.map(e=>{results.push({CompanyName:`${e._employer.name} Company`,Talent:`${e._candidateUser.firstName} ${e._candidateUser.lastName}`,Rating:e._feedback.rating,Comment:e._feedback.comment})});return[{meta:{worksheet:'RatingReport'},data:{details:results}}];"
  },
  {
    "name": "JobNatureReport",
    "func": " const Model = connection.models.Recruitments;let condition; condition = {workspace: new ObjectId(query.workspace),status: {$ne: -1} }; const result = await Model.aggregate().lookup({  from: 'Categories',  localField: '_category',  foreignField: 'code',  as: '_categories'}).match(condition).group({  _id: { _category: '$_categories.name', employmentType: '$employmentType'  },  count: {$sum: 1}}).project({  category: '$_id._category',  employmentType: '$_id.employmentType',  count: '$count'}).exec(); let results = []; result.map(recruitment => {const mapType = {  fullTime: 'Full Time',  partTime: 'Part Time',  freelance: 'Freelance'};const employmentType = mapType[recruitment.employmentType];results.push({  jobType: employmentType,  industry: recruitment.category && recruitment.category[0] && recruitment.category[0]['en'],  count: recruitment.count}); }); return [{meta: {worksheet: 'JobNatureReport'}, data: {details: results}}];"
  },
  {
    "name": "EmploymentReport",
    "func": "const Model = connection.models.Employments;let condition;if (query.startDateFrom && query.startDateTo) {condition = {createdAt: {$gte: query.startDateFrom, $lte: query.startDateTo}};}if (query.startDateTo && !query.startDateFrom) {condition = {createdAt: {$lte: query.startDateTo}};}if (query.startDateFrom && !query.startDateTo) {condition = {createdAt: {$gte: query.startDateFrom}};} condition = {...condition,'employer.currentWorkspace': new ObjectId(query.workspace),'candidate.currentWorkspace': new ObjectId(query.workspace),'candidates.workspace': new ObjectId(query.workspace)};const result = await Model.aggregate().lookup({from: 'Users',localField: 'employer',foreignField: '_id',as: 'employer'}).lookup({from: 'Candidates',localField: 'candidate',foreignField: '_id',as: 'candidates'}).lookup({from: 'Users',localField: 'candidates.candidate',foreignField: '_id',as: 'candidate'}).match(condition).unwind('employer', 'candidate').exec();const results = [];result.map(e => {let statusValues;switch (e.status) {case 1:statusValues = '受聘中';break;case 100:statusValues = '已完成';break;default:break;} const mapType = {  fullTime: 'Full Time',  partTime: 'Part Time',  freelance: 'Freelance'};const employmentType = mapType[e.employmentType]; results.push({jobType:employmentType,companyName: e.employer.name,talent: `${e.candidate.firstName} ${e.candidate.lastName}`,jobTitle: e.jobTitle,status: statusValues,createdAt:e.createdAt  });});return [{meta: {worksheet: 'EmploymentReport'}, data: {details: results}}];"
  },
  {
    "name": "OrderReport",
    "func": "const Model = connection.models.Orders; let condition;  if (query.startDateFrom && query.startDateTo) {condition = {  workspace: query.workspace,  date: {$gte: query.startDateFrom, $lte: query.startDateTo}};  }  if (query.startDateTo && !query.startDateFrom) {condition = {  workspace: query.workspace,  date: {$lte: query.startDateTo}};  }  if (query.startDateFrom && !query.startDateTo) {condition = {  workspace: query.workspace,  date: {$gte: query.startDateFrom}};  }  if (!query.startDateTo && !query.startDateFrom) {condition = {workspace: query.workspace};  }  const result = await Model.find(condition).populate({path: 'client'}).populate({path: 'shipment'}).populate({path: 'pickupStore', populate: {path: 'address'}}).populate({path: 'contactAddress', populate: {path: 'city'}}).populate({path: 'contactAddress', populate: {path: 'state'}}).populate({path: 'contactAddress', populate: {path: 'country'}}).populate({path: 'product', populate: {path: 'items.product'}}).populate({path: 'product', populate: {path: 'items.productSKU'}}).populate({path: 'product.$items.productSKU.$specs.spec'}).populate({path: 'charge.services.service'}).populate({  path: 'payment',  populate: { path: 'transactions.paymentMethod'  }}).lean().exec();  const results = [];  result.map(order => {let statusValues;switch (order.status) {  case -1: statusValues = '已取消'; break;  case 0: statusValues = '等侯付款'; break;  case 10: statusValues = '準備發貨'; break;  case 50: statusValues = '已發貨'; break;  case 100: statusValues = '已完成'; break;  default: break;}let paymentStatus;switch (order.payment && order.payment.status) {  case 0: paymentStatus = '未付款'; break;  case 50: paymentStatus = '部分已付'; break;  case 100: paymentStatus = '已付款'; break;  default: break;}let shippmentStatus;switch (order.shipment && order.shipment.status) {  case -1: shippmentStatus = '已取消'; break;  case 0: shippmentStatus = '等侯中'; break;  case 10: statusValues = '處理中'; break;  case 100: statusValues = '已完成'; break;  default: break;}let delivery = '送貨';let storeName;if (order.pickupStore && order.pickupStore.address) {  storeName = order.pickupStore.address.name;  delivery = '自提';}const chargeServices = order.charge.services;const others = order.charge.others;const chargeCoupons = order.charge.coupons;let serviceAmount;serviceAmount =  chargeServices && chargeServices.length > 0 ? chargeServices.reduce((amount, v) => {return amount + Number(v.amount || 0);  }, 0) : 0;let otherAmount;otherAmount =  others && others.length > 0 ? others.reduce((amount, v) => {return amount + Number(v.amount || 0);  }, 0) : 0;let couponAmount;couponAmount =  chargeCoupons && chargeCoupons.length > 0 ? chargeCoupons.reduce((amount, v) => {return amount + Number(v.amount || 0);  }, 0) : 0;const contactAddress = order.contactAddress;results.push({  orderNo: order.orderNo,  date: order.date,  status: statusValues,  paymentMethod: order.payment && order.payment.transactions && order.payment.transactions[0] && order.payment.transactions[0].paymentMethod.name['en'],  paymentStatus: paymentStatus,  currency: order.charge.currency,  totalAmount: order.charge.totalAmount,  basetotalAmount: order.charge.base,  serviceAmount: serviceAmount,  otherAmount: otherAmount,  couponAmount: couponAmount,  remarks: order.remarks,  delivery: delivery,  shippmentStatus: shippmentStatus,  addressName: contactAddress.name,  phone: contactAddress.phone,  address1: contactAddress.address1,  address2: contactAddress.address2,  city: contactAddress.city.name['zh-hk'],  state: contactAddress.country.name['zh-hk'] + '/' + contactAddress.state.name['zh-hk'],  postCode: contactAddress.postCode,  storeName: storeName});  });  return [{meta: {worksheet: 'OrderReport'}, data: {details: results}}];"
  },
  {
    "name": "PaymentReport",
    "func": "const Model = connection.models.Payments; let condition = {}; if (query.startDateFrom && query.startDateTo) {condition = {'transactions.date': { $gte: query.startDateFrom, $lte: query.startDateTo  }}; } if (query.startDateTo && !query.startDateFrom) { condition = { 'transactions.date': {$lte: query.startDateTo}}; } if (query.startDateFrom && !query.startDateTo) { condition = { 'transactions.date': {$gte: query.startDateFrom}}; }   const payments = await Model.find(condition).populate({path: 'order', populate: {path: 'client'}}).populate({path: 'transactions.paymentMethod'}).lean().exec(); const result = payments.filter(v => v.order.workspace.toString() === query.workspace);  const results = [];  let paymentObj;  result.map(payment=> {let statusValues;switch (payment.order.status) { case -1:  statusValues = '已取消';  break; case 0:  statusValues = '等侯付款';  break; case 10:  statusValues = '準備發貨';  break; case 50:  statusValues = '已發貨';  break; case 100:  statusValues = '已完成';  break; default:  break;}let paymentStatus;switch (payment&& payment.status) { case 0:  paymentStatus = '未付款';  break; case 50:  paymentStatus = '部分已付';  break; case 100:  paymentStatus = '已付款';  break; default:  break;}paymentObj = { orderNo: payment.order.orderNo, status: statusValues, client: payment.order.client.firstName + payment.order.client.lastName, paymentStatus: paymentStatus, currency: payment.order.charge.currency};payment.transactions.map(transactions=> { let paymentTransactionStatus; switch (transactions&& transactions.status) {  case 0:paymentTransactionStatus = '未付款';break;  case 50:paymentTransactionStatus = '部分已付';break;  case 100:paymentTransactionStatus = '已付款';break;  default:break; } paymentObj.amount = transactions.amount; paymentObj.paymentTransactionStatus = paymentTransactionStatus; paymentObj.date = new Date(new Date(transactions.date).getTime() + parseInt(query.utcOffset, 10) * 60 * 1000); paymentObj.receiptNo = transactions.receiptNo;paymentObj.paymentMethod = transactions.paymentMethod.name['zh-hk'];});results.push(paymentObj);  });  return [{meta: {worksheet: 'PaymentReport'}, data: {details: results}}];"
  },
  {
    "name": "DeviceReport",
    "func": "const Model = connection.models.Devices;let condition; if (query.startDateFrom && query.startDateTo) {  condition = {workspace: query.workspace,lastOnTime: {$gte: query.startDateFrom, $lte: query.startDateTo}  };}if (query.startDateTo && !query.startDateFrom) {  condition = {workspace: query.workspace,lastOnTime: {$lte: query.startDateTo}  };}if (query.startDateFrom && !query.startDateTo) {  condition = {workspace: query.workspace,lastOnTime: {$gte: query.startDateFrom}  };}if (!query.startDateTo && !query.startDateFrom) {  condition = {workspace: query.workspace};}const result = await Model.find(condition).lean().exec();let results = [];result.map(device => {  let statusValues;  switch (device.deviceStatus) {case -1:  statusValues = '黑名單';  break;case 1:  statusValues = '白名單';  break;default:  break;  }  results.push({deviceType: device.deviceType,deviceName: device.deviceName,createdAt: new Date(new Date(device.createdAt).getTime() + parseInt(query.utcOffset, 10) * 60 * 1000),lastOnTime: new Date(new Date(device.lastOnTime).getTime() + parseInt(query.utcOffset, 10) * 60 * 1000) ,status: statusValues,online: device.online ? '在線' : '離線'  });});return [{meta: {worksheet: 'DeviceReport'}, data: {details: results}}];"
  },
  {
    "name": "OrderLogisticReport",
    "func": "const Model = connection.models.Orders; let condition = {};if (query.startDateFrom && query.startDateTo && !query.peopleInCharge) { condition = { date: {$gte: query.startDateFrom, $lte: query.startDateTo} };    } if (query.startDateFrom && query.startDateTo && query.peopleInCharge) {condition = { date: {$gte: query.startDateFrom, $lte: query.startDateTo},'_logistic.peopleInCharge': {$in: [new ObjectId(query.peopleInCharge)]}};} if (query.startDateTo && !query.startDateFrom && !query.peopleInCharge) {condition = { date: {$lte: query.startDateTo}};} if (query.startDateFrom && !query.startDateTo && !query.peopleInCharge) {condition = { date: {$gte: query.startDateFrom}};}if (query.startDateTo && !query.startDateFrom && query.peopleInCharge) {condition = { date: {$lte: query.startDateTo}, '_logistic.peopleInCharge': {$in: [new ObjectId(query.peopleInCharge)]}};}if (query.startDateFrom && !query.startDateTo && query.peopleInCharge) {condition = { date: {$gte: query.startDateFrom}, '_logistic.peopleInCharge': {$in: [new ObjectId(query.peopleInCharge)]}};}if (!query.startDateTo && !query.startDateFrom && query.peopleInCharge) {condition = { '_logistic.peopleInCharge': {$in: [new ObjectId(query.peopleInCharge)]}};} const result = await Model.aggregate().lookup({ from: 'OrderLogistics', localField: '_id', foreignField: 'order', as: '_logistic'}).lookup({ from: 'OrderTimes', localField: '_id', foreignField: 'order', as: '_time'}).lookup({ from: 'OrderLogisticItems', localField: '_id', foreignField: 'order', as: '_items'}).lookup({ from: 'Users', localField: 'client', foreignField: '_id', as: '_client'}).lookup({ from: 'Users', localField: '_logistic.peopleInCharge', foreignField: '_id', as: '_peopleInChargeUser'}).lookup({ from: 'Workspaces', localField: 'workspace', foreignField: '_id', as: '_workspace'}).lookup({ from: 'VehicleTypes', localField: '_logistic.vehicleType', foreignField: '_id', as: '_vehicleType'}).lookup({ from: 'Stores', localField: '_logistic.storeTo', foreignField: '_id', as: '_storeTo'}).lookup({ from: 'Addresses', localField: '_storeTo.address', foreignField: '_id', as: '_address'}).match({ ...condition, workspace: new ObjectId(query.workspace)}).unwind('_logistic').unwind('_time').unwind('_client').unwind('_workspace').unwind('_vehicleType').sort({'_logistic.peopleInCharge': -1, date: -1});; const results = []; const items = []; result.map(order => {let statusValues;switch (order.status) { case -1:statusValues = '取消';break; case 1:statusValues = '等待中';break; case 10:statusValues = '司機已接單';break; case 15:statusValues = '司機已到達';break; case 50:statusValues = '載客中';break; case 100:statusValues = '到達目的地';break; default:break;} let duration; if (order && order._time && order._time.duration === 0) { duration = '路線';} if (order._time && order._time.duration > 0) { const hr = Number(order._time && order._time && order._time.duration) / (3600 * 1000) + 'hr'; duration = '包鐘' + hr;} const vehicleType = order&&order._vehicleType&&order._vehicleType.name['zh-hk'];let storeTo = order && order._storeTo && order._storeTo[0];  if (storeTo) {const address = order && order._address && order._address[0]; storeTo = [address&&address.name,address&&address.address1,address&&address.address2,storeTo&&storeTo.deprecatedDate ? storeTo.deprecatedDate : null ].filter(v => v).join(' ') } const mapType = order&&order._workspace&&order._workspace.preferences&&order._workspace.preferences.mapType;const peopleInChargeUser =order && order._peopleInChargeUser.map(v => {const name = `${v && v.firstName} ${v && v.lastName}`; return name ? name : v.username;}).join(', '); const locationType = order&&order._workspace&&order._workspace.preferences&&order._workspace.preferences.order&&order._workspace.preferences.order.locationType; const isStoreLocationType = locationType === 'store'; let locFr = null;let locTo = null;if (mapType !== undefined && mapType === 'googleMap') {locFr = order&&order._logistic&&order._logistic&&order._logistic.locFr&&order._logistic.locFr.properties&&order._logistic.locFr.properties.name;locTo = order&&order._logistic&&order._logistic.locTo&&order._logistic.locTo.map(v => {return v.properties&&v.properties.name ? v.properties.name : null;}).join(', ');} else { locFr = order&&order._logistic&&order._logistic.locFr&&order._logistic.locFr.properties.name; locTo = order&&order._logistic&&order._logistic.locTo&&order._logistic.locTo.map(v => {return v.properties.name;}).join(', ');} const name = `${order._client&&order._client.firstName} ${order._client&&order._client.lastName}`; const currency = order.charge.currency || 'HKD'; results.push({ orderNo: order.orderNo, date: new Date(new Date(order.date).getTime() + parseInt(query.utcOffset, 10) * 60 * 1000), status: statusValues, peopleInChargeUser: peopleInChargeUser, duration: duration, vehicleType: vehicleType, locFr: locFr, storeTo: isStoreLocationType ? storeTo : locTo, amount: `${currency} ${order.charge.totalAmount}`, client: name ? name : order._client.username, contact: order.contact.name, contactPhone: order.contact.phone, receiver: order.consignee.name, receiverPhone: order.consignee.phone});    if (order && order._items && order._items.length > 0) { order._items.map(item => {   items.push({  orderNo: order.orderNo,  qty: item.qty,  qUnit: item.qUnit,  qty2: item && item.qty2,  qUnit2: item && item.qUnit2,  width: item.dimensions.width,  height: item.dimensions.height,  length: item.dimensions.length,  unit: item.dimensions.unit, weight: item.weight,  weightUnit: item.weightUnit,  weight2: item && item.weight2,  weight2Unit: item && item.weight2Unit,  cbm: item.cbm,  rt: item.rt     }); }); }});return [{meta: {worksheet: 'OrderLogisticReport'}, data: {details: results}},{meta: {worksheet: 'OrderLogisticItemsReport'}, data: {details: items}}]"
  },
  {
    "name": "ExpenseReport",
    "func": "const Model = connection.models.Expenses;let condition = {}; if (query.startDateFrom && query.startDateTo && !query.peopleInCharge) {condition = {  expenseDate: {$gte: query.startDateFrom, $lte: query.startDateTo}}; } if (query.startDateFrom && query.startDateTo && query.peopleInCharge) {condition = {  expenseDate: {$gte: query.startDateFrom, $lte: query.startDateTo},  payer: {$in: [new ObjectId(query.peopleInCharge)]}}; } if (query.startDateTo && !query.startDateFrom && !query.peopleInCharge) {condition = {expenseDate: {$lte: query.startDateTo}}; } if (query.startDateFrom && !query.startDateTo && !query.peopleInCharge) {condition = {expenseDate: {$gte: query.startDateFrom}}; } if (query.startDateTo && !query.startDateFrom && query.peopleInCharge) {condition = {  expenseDate: {$lte: query.startDateTo},  payer: {$in: [new ObjectId(query.peopleInCharge)]}}; } if (query.startDateFrom && !query.startDateTo && query.peopleInCharge) {condition = {  expenseDate: {$gte: query.startDateFrom},  payer: {$in: [new ObjectId(query.peopleInCharge)]}}; } if (!query.startDateTo && !query.startDateFrom && query.peopleInCharge) {condition = {  payer: {$in: [new ObjectId(query.peopleInCharge)]}}; } const result = await Model.find({  ...condition,  workspace: new ObjectId(query.workspace)}).populate({path: 'payer'}).populate({path: 'order'}).populate({path: 'expenseType'}).lean().exec(); let results = []; result.map(expense => {const name = `${expense.payer && expense.payer.firstName} ${  expense.payer && expense.payer.lastName}`; const currency = expense.currency || 'HKD'; results.push({  orderNo: expense&&expense.order&&expense.order.orderNo,  expenseType: expense.expenseType && expense.expenseType.name && expense.expenseType.name['zh-hk'],   amount: `${currency} ${expense.amount}`,  expenseDate: expense.expenseDate ? new Date(  new Date(expense.expenseDate).getTime() +    parseInt(query.utcOffset, 10) * 60 * 1000   ) : '',  description: expense.description,  payer: name ? name : expense.payer.username}); }); return [{meta: {worksheet: 'ExpenseReport'}, data: {details: results}}];"
  }
]
