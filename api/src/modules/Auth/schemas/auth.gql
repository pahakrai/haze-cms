scalar Date

type UserToken {
  scope: String
  userId: String
  token_type: String
  expires_in: Int
  expires_on: Date
  access_token: String
  refresh_token: String
}

type PasscodeToken {
  token: String
  expiresIn: Int
  expiresAt: Date
}

type Passcode {
  code: String
  expiresIn: Int
  expiresAt: Date
}

type Auth {
  _id: ID!

  # generated by mongoose {timestamp: true}
  createdAt: Date
  updatedAt: Date
}

input AuthCreateModel {
  name: String!
}

input AuthUpdateModel {
  name: String
}

type PaginateAuth {
  nodes: [Auth]
  startCursor: ID
  endCursor: ID
  nodeCount: Float
  total: Float
  isEnd: Boolean
}

input AuthSearchModel {
  q: String
}

input AuthSignUpPasscodeModel {
  code: String
  expiresAt: Date
  expiresIn: Int
}

input AuthRefreshTokenModel {
  device: String
  token: String
  expiresAt: Date
  expiresIn: Int
}

input AuthLoginChannelModel {
  type: String
  id: String
}

input AuthSignUpModel {
  phoneRegionCode: String
  phone: String
  email: String
  username: String
  verified: UserVerifiedCreateModel
  isVerified: Boolean
  userTypes: [String]
  name: String
  firstName: String
  lastName: String
  dob: String
  gender: String
  avatars: [UserAvatarCreateModel]
  preferences: UserPreferenceCreateModel
  status: Int
  description: String
  activationIssues: [UserActivationIssueCreateModel]
  password: String
  currentWorkspace: String
  workspaces: [String]
}

input ForgotPasswordOptions {
  transportType: String
  interactType: String
}

input ValidatePasscodeOptions {
  useOnce: Boolean
  updateUserVerify: Boolean
  returnNewPasscodeToken: Boolean
}

input SendPasscodeOptions {
  transportType: String
  contactMethod: String
  interactType: String
  updateDb: Boolean
  sendToInput: Boolean
}

# type Query {
# }

type signUpResponse {
  user: User
  userToken: UserToken
}

type Mutation {
  signUp(user: AuthSignUpModel!): signUpResponse
  userToken(
    input: String!
    password: String!
    userTypes: [String!]
    workspace: ID
  ): UserToken
  forgotPassword(input: String!, options: ForgotPasswordOptions): Boolean
  validatePasscode(
    input: String
    passcode: String!
    options: ValidatePasscodeOptions
  ): PasscodeToken
  validatePasscodeToken(
    token: String!
    options: ValidatePasscodeOptions
  ): PasscodeToken
  refreshToken(refreshToken: String!): UserToken
  sendPasscode(input: String, options: SendPasscodeOptions): Boolean
  setPassword(passcodeToken: String!, password: String!): Boolean
  resetPassword(passcodeToken: String!, password: String!): Boolean
  updateMyPassword(newPassword: String!, oldPassword: String): Boolean
  loginChannelExists(type: String!, id: String!): Boolean
}
