scalar Date
scalar JSON

type Address {
  _id: ID!
  type: String
  name: String
  country: Region
  state: Region
  city: Region
  address1: String
  address2: String
  postCode: String
  phone: String
  isDefault: Boolean
  geometry: LocationGeometry
  # generated by mongoose {timestamp: true}
  createdAt: Date
  updatedAt: Date
}

type LocationGeometry {
  type: String
  coordinates: [Float]
}

input LocationGeometryInput {
  type: String
  # TODO: check how to support [[Float]] as well
  coordinates: [Float]
}

input AddressCreateModel {
  type: String
  name: String!
  country: ID!
  state: ID!
  city: ID!
  address1: String
  address2: String
  postCode: String
  phone: String
  geometry: LocationGeometryInput
  isDefault: Boolean
  # ref data depends the refType
  # below data are mostly saved in api
  refType: String
  ref: String
}

input AddressUpdateModel {
  type: String
  name: String
  country: String
  state: String
  city: String
  address1: String
  address2: String
  postCode: String
  phone: String
  geometry: LocationGeometryInput
  isDefault: Boolean
  # ref data depends the refType
  # mostly information are saved on api
  refType: String
  ref: JSON
}

type PaginateAddress {
  nodes: [Address]
  startCursor: ID
  endCursor: ID
  nodeCount: Float
  total: Float
  isEnd: Boolean
}

input AddressSearchModel {
  q: String
}

type Query {
  address(id: ID!): Address
  addresss(
    query: AddressSearchModel
    paginate: Paginate
    options: QueryOption
  ): PaginateAddress
}

type Mutation {
  createAddress(addressCreateModel: AddressCreateModel): Address
  updateAddress(id: ID!, addressUpdateModel: AddressUpdateModel): Address
}
