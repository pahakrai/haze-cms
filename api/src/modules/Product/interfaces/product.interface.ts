import {ObjectId} from 'mongodb';
import {Document, PaginateModel} from 'mongoose';
import {LocalizeString} from 'src/core';
import {ICategory} from 'src/modules/Category/interfaces';
import {IProductSpec} from '../submodules/ProductSpec/interfaces';
import {IProductSku} from '../submodules/ProductSku/interfaces';
import {FileMeta} from 'src/modules/File/FileMeta';
import {ProductType} from '../submodules/ProductType/interfaces';

interface ProductPriceRange {
  /**
   * lowest price of SKUs
   */
  min: number;

  /**
   * highest price of SKUs
   */
  max: number;
}

export interface Product extends Document {
  /**
   * unique ID for document
   */
  _id: ObjectId;

  /**
   * product name
   */
  name: LocalizeString;

  /**
   * product description
   */
  description: LocalizeString;

  /**
   * product's category, can virtual populate
   */
  _category: ICategory['code'];

  /**
   * product content
   */
  content: LocalizeString;

  /**
   * product's image list
   */
  images: FileMeta[] | FileMeta['_id'][];

  maxAllow: number;

  /**
   * product type
   */
  types: ProductType[] | ProductType['_id'][];

  /**
   * product platformTypes
   */
  platformTypes?: string[];

  /**
   * price range of this product, used for product list display
   * generated by SKU list
   */
  priceRange: ProductPriceRange;

  // populated field
  category?: ICategory;

  /**
   * spec list of this product
   * only use this field after populate
   */
  specs?: IProductSpec[];

  /**
   * SKU list of this product
   * only use this field after populate
   */
  skus?: IProductSku[];
}

export type IProductModel = PaginateModel<Product>;
