scalar Date

type PaymentTransaction {
  _id: String
  id: String
  amount: Float
  status: Int
  date: Date
  receiptNo: String
  files: [FileMeta!]
  paymentMethod: PaymentMethod
}

type Payment {
  _id: ID!
  order: Order
  status: Int
  transactions: [PaymentTransaction!]

  # generated by mongoose {timestamp: true}
  createdAt: Date
  updatedAt: Date
}

input PaymentTransactionInput {
  amount: Float
  status: Int
  id: String
  date: Date
  files: [ID]
  # code
  paymentMethod: String
}

input PaymentCreateModel {
  order: String!
  transactions: [PaymentTransactionInput!]
}

input PaymentUpdateModel {
  name: String
}

type PaginatePayment {
  nodes: [Payment]
  startCursor: ID
  endCursor: ID
  nodeCount: Float
  total: Float
  isEnd: Boolean
}

input PaymentSearchModel {
  q: String
}

type Query {
  payment(id: ID!): Payment
  payments(
    query: PaymentSearchModel
    paginate: Paginate
    options: QueryOption
  ): PaginatePayment
  paymentByOrderId(orderId: ID!): Payment
}

type Mutation {
  createPayment(
    paymentCreateModel: PaymentCreateModel
    files: [Upload!]
  ): Payment
  updatePayment(id: ID!, paymentUpdateModel: PaymentUpdateModel): Payment
  appendTransaction(
    id: ID!
    transaction: PaymentTransactionInput!
    files: [Upload!]
  ): Payment
  updateTransaction(
    id: ID!
    transactionId: ID!
    transaction: PaymentTransactionInput!
    files: [Upload!]
  ): Payment
}
